// Code generated by MockGen. DO NOT EDIT.
// Source: internal/port/repository/user-repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/port/repository/user-repository.go -destination=mocks/repository/user_repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	dto "codetest/internal/adapter/api/dto"
	model "codetest/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *model.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// DeleteOneBy mocks base method.
func (m *MockUserRepository) DeleteOneBy(ctx context.Context, column, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneBy", ctx, column, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneBy indicates an expected call of DeleteOneBy.
func (mr *MockUserRepositoryMockRecorder) DeleteOneBy(ctx, column, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneBy", reflect.TypeOf((*MockUserRepository)(nil).DeleteOneBy), ctx, column, value)
}

// Find mocks base method.
func (m *MockUserRepository) Find(ctx context.Context, request *dto.QueryUserRequest) ([]*model.UserModel, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, request)
	ret0, _ := ret[0].([]*model.UserModel)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find.
func (mr *MockUserRepositoryMockRecorder) Find(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserRepository)(nil).Find), ctx, request)
}

// GetOneBy mocks base method.
func (m *MockUserRepository) GetOneBy(ctx context.Context, column, value string) (*model.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneBy", ctx, column, value)
	ret0, _ := ret[0].(*model.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneBy indicates an expected call of GetOneBy.
func (mr *MockUserRepositoryMockRecorder) GetOneBy(ctx, column, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneBy", reflect.TypeOf((*MockUserRepository)(nil).GetOneBy), ctx, column, value)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, user *model.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}
