// Code generated by MockGen. DO NOT EDIT.
// Source: internal/port/repository/user-log-repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/port/repository/user-log-repository.go -destination=mocks/repository/user_log_repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	dto "codetest/internal/adapter/api/dto"
	model "codetest/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserLogRepository is a mock of UserLogRepository interface.
type MockUserLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserLogRepositoryMockRecorder
	isgomock struct{}
}

// MockUserLogRepositoryMockRecorder is the mock recorder for MockUserLogRepository.
type MockUserLogRepositoryMockRecorder struct {
	mock *MockUserLogRepository
}

// NewMockUserLogRepository creates a new mock instance.
func NewMockUserLogRepository(ctrl *gomock.Controller) *MockUserLogRepository {
	mock := &MockUserLogRepository{ctrl: ctrl}
	mock.recorder = &MockUserLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLogRepository) EXPECT() *MockUserLogRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserLogRepository) Create(ctx context.Context, userLog *model.UserLogModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserLogRepositoryMockRecorder) Create(ctx, userLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserLogRepository)(nil).Create), ctx, userLog)
}

// Find mocks base method.
func (m *MockUserLogRepository) Find(ctx context.Context, request *dto.QueryUserLogRequest) ([]*model.UserLogModel, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, request)
	ret0, _ := ret[0].([]*model.UserLogModel)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find.
func (mr *MockUserLogRepositoryMockRecorder) Find(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserLogRepository)(nil).Find), ctx, request)
}
